7.1: Blocking
-------------------
- block is a technical jargon for sleep
- you can set a socket to nonblocking with a call to fcntl()
sockfd = socket(PF_INET, SOCK_STREAM, 0)
fcntl(sockfd, F_SETFL, O_NONBLOCK)

7.2: poll() - synchronous I/O multiplexing
-------------------
- poll() allows us to just be notified when some data is ready to be read on the socket
  - process can go to sleep in the meantime
int poll(struct pollfd fds[], nfds_t nfds, int timeout)
  - fds: array of sockets to monitor
  - nfds: count of elements in the array
  - timeout: timeout in ms
struct pollfd {
  int fd;         // the socket descriptor
  short events;   // bitmap of events we're interested in
  short revents;  // when poll() returns, bitmap of events that occured
}
- events is a bitwise OR of the following 
  - POLLIN: alert me when data is ready to recv() on this socket
  - POLLOUT: alert me when I can send() data to this socket without blocking

7.3: select() - synchronous I/O multiplexing old school
-------------------
- both select() and poll() offer similar functionality and performance but differ a bit on how they are used
- select() gives you the ability to monitor several sockets at the same time
int select(int numfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, strut timeval *timeout);
- monitors "sets" of file descriptors
- when select() returns, the fds will be modified to reflect which of the file descriptors you selected is ready for some operation
- you can test them with FD_ISSET()
FD_SET(int fd, fd_set *set) -> add fd to the set
FD_CLR(int fd, fd_set *set) -> remove fd from the set
FD_ISSET(int fd, fd_set *set) -> return true is fd is in the set
FD_ZERO(fd_set *set) -> clear all entries from the set
- timeval allows you to specify a timeout period
struct timeval {
  int tv_sec; -> number of seconds to wait
  int tv_usec; -> number of microseconds to wait
};
- if set to 0, then select() will timeout immediately and poll all fds 
- if set to NULL, select() will never timeout and will wait till a fd is ready

7.4: handling partial send()s
-------------------
- kernel might not send out all bytes and buffer them instead
- can have a sender make sure to send all bytes, but then this makes it a pain to for the reciever

7.5: Serialization - How to pack
-------------------
- options for sending binary data across the network
1) convert numbers into tetxt and then send text, reciever will convert it back
- advantage that you can easily print and read the data the is sent
- may be slow to convert and takes up more space than the original number
2) send raw data passing pointer to the data to send
- fast 
- not portable since not all machines represent numbers the same
3) encode hte number into portable binary form for the reciever to decode (preferred)
- pack data into a known format and send over wire for decoding
- (various macros in the book that do packing, usually just want to handle this with a library)
- how to send a struct?
- best is to pack each field indepdendently and then unpack them into a struct on the other side
- (packing example functions in the book)
- RFC 4506 defines binary formats for a bunch of different types, useful for packing

7.6: Son of Data Encapsulation
-------------------
- stick a header on there with some identifiying info 
- encapsulate data in a tiny header and packet structure
- both the client and server know how to pack (marshal) and unpack (unmarshal)

7.7: Broadcast packets - Hello World
-------------------
- with UDP IPv4 (not TCP) you can broadcast
  - IPv6 is called multicasting
- socket option SO_BROADCAST























