7: Handling blocking work with threads
-----------------------
- can use multithreading with asyncio to run blocking apis

7.1: Introducing the threading module
-----------------------
- can create and manage threads via the threading module
    - exposes the Thread class, accepts function to run in a different thread
- I/O released GIL, so we can run IO in different threads concurrently
- exceptions are only thrown in the main thread
- can use daemon threads (long running background tasks)
- thread class has run method that we can override

7.2: Using threads with asyncio
-----------------------
- like process pools, there are also thread pools
- concurrent.futures provides an implementation of Executor abstract class to work for threads
    - called ThreadPoolExecutor
    - create and maintain pool of threads that we can submit work too
- default number of threads is determiend by min(32, os.cpu_count() + 4)
- can also use it with asyncio
- default executors are a reusable sigleton executor for you entire application
    - will always default to ThreadPoolExecutor but we can set a custom one
    - use loop.set_default_executor
    - if we set it to None, asycnio creates and caches a default thread pool executor for us
- in 3.9, asyncio.to_thread coroutine was introduced
    - takes a function to run in a thread and a set of arguments to pass to that functions

7.3: Locks, shared data, and deadlocks
-----------------------
- multithreading code is also susceptible to race conditions when we have shared data
- for multiprocessing, we had to create special shared memory object
- threads to have access to the same memory so we can just access variables directly
- Reentrant locks: special type of lock that can be acquired by the same thread more than once
    - allows a thread to reenter critical sections
    - RLock class 
- deadlock: contention over a shared resource with no resolution
    - two threads try to acquire the same lock and neither are able to make progress
    
7.4: Event loops in separate threads
-----------------------
- uses Tkinter to demonstrate this
- can run event loop running in main thread and asyncio event loop in another thread
- a few asyncio functions that are non blocking and thread safe
    - call_soon_threadsafe: takes a python function and schedules it to execute it in a thread safe manner at next iteration of asynico even tloop
    - asyncio.run_coroutine_threadsafe: takes coroutine and submits it to run in threadsafe manner
- common to use queue to share information

7.5: Event loops in separate threads
-----------------------
- for most cases, the rule of thumb is multi threading only makes sense for blocking I/O
- to properly release GIL and avoid concurrency bugs, code needs to avoid python objects    
    - (dictionaries, lists, integers, ..)
- some libraries such as hashlib and numpy perform work in c and release the GIL
- lots of numpy operations are also low level code outside of python that release the GIL
    - depends if there is a lot of supporting python code








