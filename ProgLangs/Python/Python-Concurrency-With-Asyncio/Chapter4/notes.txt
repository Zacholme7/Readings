4: Concurrent Web Requests
--------------
- aiohttp is a non blocking sockets library to make web requests

4.1: Introducing atiohttp
--------------
- popular requests library is "requests", but it is blocking
- aiohttps solves the problem of non blocking sockets

4.2: Asynchronous context managers
--------------
- can use context manager to abstrct the shutdown logic with the try/finally block for exception handling
    - with ... as ...
    - wont work with async though
- can use a asynchronous context manager
    - async with ... as ...
    - implement two special coroutine methods
        - __aenter__: asynchronously aquires a resource
        - __aexit__: closes the resource
- aiohttp employ the concept of a session
    - think of session as opening a new browser window
    - within brower window, you make connection to any number of web pages
        - this is known as conneciton pooling
- most aiohttp applications run one session for the entire application
- session object passed to method where needed
- has methods on it for making any number of web requests
    - GET, PUT, POSTS, ...
- create session using async with and aiohttp.ClientSession context manager
- ClientSession will create a default maximum of 100 connections
    - can make instance of TCPConnector specifiying the max connections if we want
- can also set timeouts for aiohttp requests
    - by default, it is 5 minutes
    - can set as session level or request level
    - specify timeouts using ClientTimeout data structure
        - can also set timeouts on establishing connection or reading data

4.3: Running tasks concurrently, revisited
--------------
- list comprehension will make it run requentially
    - await as soon as we create the task, so it will run sequentially
- create in one and await in a second

4.4: Running requests concurrently with gather
--------------
- asyncio.gather is used for running awaitable concurrently
    - takes a sequence of awaitables and lets us run them concurrently
    - will automatically wrap it in a task 
    - returns an awaitable that we have to wait 
- gather will always return the the awaitables in the order that we pass them in
- optional parameter return_exceptions which allows us to specify how we want to deal with exceptions from awaitables
    - False: default value, if any throw exception, gather will always throw exception
        - other coroutines will still run run as long as we handle the exception
    - True: gather will return any exceptions as part of the result list
        - gather will not throw any exceptions itself
- there is not an easy way to cancel our tasks if one throws an exception
- must wait for all coroutines to finish before we can process the results
- can solve both of the above issues through...

4.5: Processing requests as they complete
--------------
- asyncio.gather has the drawnack that it waits for all awaitables to finish before allowing access to results
    - doesnt let us process a result as it is done
- to handle this, exposes function named as_completed
    - this takes a list ofa waitables and returns an iterator of futures
    - can then iterate over them and await each one
    - when await completes, we can retrieve the result of the coroutine that finished first out of all our awaitables
    - although, they are no longer deterministic
    - supposed a timeout with an optional timeout parameter, raises TimeoutException if it times out

4.6: Finger grained control with wait
--------------
- drawback to gather and as_completed is that there is no easy way to cancel tasks that were already running when we saw an exception
- for as_completed, another drawback is that it is non deterministic
- wait is similar to gather wait that offers more specific control to handle these situations
    - returns a set of tasks that are finished with either a result or an exception
    - and a set of tasks that are still runnning
    - can also set a timeout that does not throw exception
- signature of wait is a list of awaitable objets, followed by optional timeout and optional return_when string
    - ALL_COMPLETED, FIRST_EXCEPTION, FIRST_COMPLETED. all_completed is default
- .exception() will check to see if we have an exception
- drawback of ALL_COMPLETED is that we could have any number of exceptions while we wait for other coroutines to complete
- FIRST_EXCEPTION
    - no exceptions from any awaitables: then it is equivalent to ALL_COMPLETED
    - one or more exception: will immediately return once exception is throw
        - done set will have coroutines that finished alongside any with excpetions
- FIRST_COMPLETED
    - make the wait coroutine return as soon as it has at least one result
- wait also allows us to set timeouts
    - set the timeout parameters with the number of seconds desired
    - if we exceed the time, wait will return both the done and pending task set
- best practice to wrap coroutines we pass into wait in a task
















