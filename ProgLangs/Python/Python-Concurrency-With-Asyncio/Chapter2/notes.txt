2.1: Introducing Coroutines
--------------------
- think of a regular python function, but can pause execution and wake up later
- async lets us define a coroutine
- await lets use pause our coroutine when we have long running operation
- coroutines are not executed when we call them directly
    - it creates a coroutine object that can be run later
    - need to explicitly run it on an event loop
- await keyword is usually followed by a call to a coroutine
    - specifically, an object known as an awaitable (this is not always a coroutine)
- using await will cause the coroutine following it to be run
    - in constrast, calling a coroutine directly will produce a coroutine object
- await expression will pause the coroutine where it is contained in until the coroutine we awaited finished and returns a result

2.2: Introducing long-running coroutines with sleep
--------------------
- can simulate long running coroutine with asyncio.sleep

2.3: Running concurrently with tasks
--------------------
- need to use tasks to run co-routines concurrently
- tasks are wrappers around a coroutine that schedules a coroutine to run on the event loop as soon as possible
- use asyncio.create_task to create a fast
    - give it a coroutine to run
- sequentially start multiple tasks to run them concurrently
- when we hit first await, all tasks are scheduled
- executing long running operations concurrenty is where asyncio shines

2.4: Canceling tasks and setting timeouts
--------------------
- need to be careful that we dont wait indefinitely
- each taks has a method called cancel that we can use to stop a task
    - will cause task to raise CancelledError when we await it 
- can use asyncio.wait_for to specify a timeout
    - will raise asyncio.TimeoutError if the coroutine takes longer than the specified timeout
- may also want to keep task running, but notify user that something is taking longer
    - can use asyncio.shield to wrap a task
    - will prevent the task from being cancelled

2.5: Tasks, coroutines, futures, and awaitables
--------------------
- coroutines and tasks can both be used in await expressions
- a future is a python object that contains a single value that you expect to get at some point in the future
    - may not have it yet
- usually when you create a future it does not have any value it wraps around bc it does not exist yet
    - once you get result, you can set the value of future, this will complete it
- can also use future in await expression
    - if we await future, it means "pause until future has a value set then wake up and process"
- with asyncio, we should not use futures that much
- there is a strong relationship between tasks and futures
    - task directly inherits from future
    - future can be thought of as representing a val that we wont have for a while
    - task can be thought of as a combination of a coroutine and a future
        - when we create a task, we are creating an empty future and running the coroutine
        - when coroutine is complete, we set the value of the future
    - common thread is the Awaitable abstract base class

2.6: Measuring coroutine execution time with decorators
--------------------
- added timer to time the code

2.7: The pitfalls of coroutines and tasks
--------------------
- two main errors occur when trying to turn application asynchronous
    - attemping to run cpu bound code in tasks/coroutines without multiprocessing
    - using blocking I/O bound apis without multithreading
- to perform cpu bound work and still use async/await, have to use process pool

2.8: Accessing and manually managing the event loop
--------------------
- can create an event loop by using asyncio.new_event_loop
    - gives us more control
- can access the event loop
- should not use to event loop frequently, but there are times when it is useful

2.9: Using debug mode
--------------------
- asyncio has a debug mode
- asyncio.run has a debug parameter that we can set to true
- debug mode in python can be enabled with "-X dev" in execution
- we will see message logedd when a courtine takes too long
- default message time is 100ms but we can change this

Summary
--------------------
- We’ve learned how to create coroutines with the async keyword. Coroutines
can suspend their execution on a blocking operation. This allows for other
coroutines to run. Once the operation where the coroutine suspended com-
pletes, our coroutine will wake up and resume where it left off.
- We learned to use await in front of a call to a coroutine to run it and wait for it
to return a value. To do so, the coroutine with the await inside it will suspend
its execution, while waiting for a result. This allows other coroutines to run
while the first coroutine is awaiting its result.
- We’ve learned how to use asyncio.run to execute a single coroutine. We can
use this function to run the coroutine that is the main entry point into our
application.
- We’ve learned how to use tasks to run multiple long-running operations con-
currently. Tasks are wrappers around coroutines that will then be run on the
event loop. When we create a task, it is scheduled to run on the event loop as
soon as possible.
- We’ve learned how to cancel tasks if we want to stop them and how to add a
timeout to a task to prevent them from taking forever. Canceling a task will
make it raise a CancelledError while we await it. If we have time limits on how
long a task should take, we can set timeouts on it by using asycio.wait_for .
- We’ve learned to avoid common issues that newcomers make when using
asyncio. The first is running CPU-bound code in coroutines. CPU-bound code
will block the event loop from running other coroutines since we’re still single-
threaded. The second is blocking I/O, since we can’t use normal libraries with
asyncio, and you must use asyncio-specific ones that return coroutines. If your
coroutine does not have an await in it, you should consider it suspicious. There
are still ways to use CPU-bound and blocking I/O with asyncio, which we will
address in chapters 6 and 7.
- We’ve learned how to use debug mode. Debug mode can help us diagnose com-
mon issues in asyncio code, such as running CPU-intensive code in a coroutine.




































