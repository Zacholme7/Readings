11: Synchrononization
---------------------
- concurrency bugs are not fully eliminated with asyncio

11.1: Understanding single threaded concurrency bugs
---------------------
- in asyncio single thread model, operation will always run to completion without inconsistent state information
- can still cause bug where multiple operations executed in the wrong order can cause issues
    - you hit a suspension point with await and another coroutine runs and modifies some shared state
- in multithreaded: race conditions are possible anywhere you modify a mutable state
- in singlethreaded: race conditions are possible when you need to modify the mutable state during an await point

11.2: Locks
---------------------
- asyncio locks operate similarly to locks in multiprocessing/threading
    - except these are awaitables objects that suspend coroutine execution when they are blocked
    - other code can run when coroutine is waiting to acquire a lock
    - also asynchronous context managers, can use "async with"
- dont have to use locks that often. Most of the time you can just re organize the code

11.3: Limiting concurrency with semaphores
---------------------
- semaphore: act like lock but can be acquired up to a set number of times
    - will block if this limit is reached until the count goes back down
- async with will always handle acquire and release, but you can call release more than you call acquire
    - can use BoundedSemaphore, will throw error if released more than acquired

11.4: Notifying tasks with events
---------------------
- sometimes we need to wait for some external event to happen before we can proceed
- Event objects provide mechanism to help out when we want to idle while waiting for something to happen
    - keeps track of flag that indicates if an event has happened or not
    - can control flag with set and clear()
    - call wait coroutine on event to block until set is called

11.5: Conditions
---------------------
- Condition combines aspects of a lock and an event into one synchronization primitive
    - acquire lock then wait for an event to occur
- wait_for: instead of blocking until someone notifies the condition, wait_for takes a predicate and will block until that predicate returns true









