8: Streams
-----------------------
- many use cases opf sockets rely on a few conceptually simple operations
- using streams is the recommended way to build network based applications in asyncio

8.1: Introducing Streams
-----------------------
- streams are a high lvel set of classes/fucntions that create and manage network connections and generic stream of data
- built on top of apis known as transports and protocols
    - directly wrap sockets providing a clean interface

8.2: Transports and protocols
-----------------------
- transport is an abstraction for communcation with an arbitrary stream of data
    - various transports depending on what source we are using
    - ReadTransport, WriteTransport, and Transport
- protocol is just a python class here, not something like HTTP/FTP
    - connection_made: transport calls this method when the underlying socket has successfully connected
    - data_received: transport calls this method whenever it receives data
- once we write protocol, use create_connector to create a socket connection and wrap it in the appropriate transport

8.3: Stream readers and stream writers
-----------------------
- transports and protocols are lower level apis that are best suited for when we need direct contorl over when we send and recieve data
- asyncio has the streams api
    - encapsulates the standard use cases of tranports and protocols into two classes 
    - StreamReader, StreamWriter

8.4: Non blocking command line input
-----------------------
- traditionally, use input function to get input but this is blocking
- asyncio provides connect_read_pipe: connects a protocol to a file like object
    - accepts a protocol factory: a function that creates a protocol instance
    - and a pipe: file like object that defines read and write
- utility class StreamReaderProtocol to connect insnaces of stream readers to protocols
- can swtich terminal to raw mode
    -every keystroke is send to the application, no buffering
- also have cbreak mode
    - raw move but keys like ctrl-c will still be interpreted

8.5: Creating servers
-----------------------
- can use asyncio.start_server to create a server
    - only really consider host, port, client_connected_cb functions
    - callback takes in a StreamReader and StreamWriter that will let us read and write to the client that connected
- when we await start_server, returns AbstractServer object

8.6: Creating a chat server and client
-----------------------
- describes some information about what we want in this chapter
- main details are in the coding files for a full example



