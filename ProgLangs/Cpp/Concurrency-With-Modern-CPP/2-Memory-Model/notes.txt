2.1: Basics of the memory model
------------------------------
- from concurrency pov, two main aspects
1) What is a memory location
  - object of a scalar type (ex int or a pointer) or contiguous sequence of bit fields (from cppreference)
2) What happens if two threads access the same memory location
  - if two threads access the same memory location and want to modify it, you have a data race unless...
    a) the memory location is modified by an atomic operation
    b) one access "happens before" the other
      - synchronization primitives are used to establish happens before relationships
      - memory ordering defines the details

2.2: The Contract
------------------------------
- contract between programmer and the system
- the system consists of numerous parts that are all trying to optimize in their own way
- "The weaker the rules are that the programmer has to follow, the more potential there is for the system to generate a highly optimized executable"
  - unfortunately this does not apply in practice. you are granted many optimization choices but it makes it very difficult to manage
- the stronger the contract, the less liberties the system has to generate an optimized executable
- Roughly three contract levels in c++11
*Strong*
Single threading: one control flow...
Multi-threading: tasks, threads, condition varibles...
Atomic: sequential consistency, acquire release semantic, relaxed semantic...
*Weak*
- c++ memory model has to deal with the following points
1) Atomic operations: operations that can perform without interruption
2) Partial ordering of operations: sequences of operations that must not be reordered
3) Visible effects of operations: guarantees when opeartions on shared variables are visible to other threads
- the more we weaken the memory model, the more we change our focus

2.3: Atomics
------------------------------
- sequential consistency refers to the strong memory model
- if provides two guarantees that only hold for atomics, but influence non atomics
1) the instructions of a program are executed in the order written down
2) there is a global order of all operations on all threads (global clock that all threads have to obey, on each tick a atomic operation takes place)
- numberous interleavings of the instructions but the general execution is "sequentially consistent"

- between sequential consistency and relaxed semantics there are a few more models, the most important being acquire release semantics
  - programmer has to obey weaker rules than with sequential but there can be more optimizaitons
  - threads are syncrhonized at specific syncrhonization points

- relaxed semantics refers to the weak memory model
- relaxed semantics is much more difficult to understand the interleavings and gives the system much more optimization possibilities

- std::atomic_flag: an atomic boolean (https://en.cppreference.com/w/cpp/atomic/atomic_flag)
1) the only lock free atomic (guaranteed system wide progress)
2) the building block for higher level thread abstractions
- powerful enough to build a spinlock
  - eager asks for the lock to get access to critical section
  - saves context swtich at the expense of wasting cpu cycles
  - lock often used combo of spin and mutex to spin for a limited amount of time then sleep
- it cannot be victim to lost wakeups

- std::atomic
- same atomic interface for all templates
- do not have the guarantee that they are lock free
- three partial speciailzations support the fundamental atomic interface
  - std::atmoic<bool>, std::atoimc<user-defined-type>, std::atomic<smart T*>

- compare_and_exchange_strong will compare and exchange in one operation (compare and swap)
  - this is the foundation of non blocking algorithms
- atomicValue.compare_exchange_strong(expected, desired)
  - if the compare of atomicValue with expected is true, atomicValue is set to desired
  - if comparison is false, expected is set to the atomicValue
- also a weak version since some processors dont support atomic compare exchange instrs
  - when called in a loop you should prefer the weak form













