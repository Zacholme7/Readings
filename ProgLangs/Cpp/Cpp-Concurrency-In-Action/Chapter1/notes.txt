1.1: Hello, world of concurrency in c++
-------------------------
- concurrency is about two or more seperate activites happening at the same time
- in terms of computers: single system performing multiple independent activities in parallel
- task switching gives the illusion that tasks are happening at the same time
    - this is done through a context switch
        - save state of cpu for current task and switch to another
    - has overhead
- example
    - core 1: 1 1 1 1 1 
    - core 2: 2 2 2 2 2
    - single core: 1 2 1 2 1 2 1 ...
- hardware threads: measure the number of independent tasks that hardware can genuinely run concurrently
- approaches
    - multiple single threaded processes
        - can pass messages to each other through IPC, often complicated though 
        - overhead in running processes
        - although, protections make it easier to write concurrent code
        - can run other processes in distinct machines connected over network
    - multiple threads in a single process
        - like lightweight processes
        - run independently but share address space
        - much smaller overhead
        - programmer must make sure memory is consistent
    - multiple threads in multiple processes
- parallelism: when primary concern is taking advantage of available hardware to increase performance of bulk data processing
- concurrency: when primary conern is separation of concerns/responsiveness

1.2: Why use concurrency
-------------------------
- separation of concerns
    - make program easier to understand/test and less likely to contain bugs
- performance
    - multicore processors are now everywhere
    - run multiple tasks in parallel
    - task parallelism: divide single task into parts and run each parallel
    - data parallelism: divide up data to be processed by each thread
- code using concurrency is harder to understand 
- having too many threads can lead to degredation in performance

1.3: Concurrency and multithreading in c++
-------------------------
- c++11 introducted concurrency
- low abstraction penalty

1.4: Getting started
-------------------------
- example of concurrenct program






