2.1: Basic thread management
-----------------
- every program has one thread that is started by the c++ runtime, the main() thread
- threads started by constructing std::thread object
    - pass it a function object
- supplied function is copied into storage belowing to new thread and execution is invoked
- if you pass temporary rather than named variable, can be interpreted as function declaration
    - ex: std::thread my_thread(background_task())
        - declared a function rather than lauching a new thread
    - use extra parentheses or uniform initialization syntax to avoid
        - ex std::thread my_thread{background_task()};
- once you start thread, you have to wait for it to finish or leave it to run on its own
    - call join() to wait for a thread to finish
- calling detach() leaves the thread to run in the background
    - no direct means of communicating with it
    - no longer possible to wait for it to complete
    - detached threads are called daemon threads
        - typically long running 

2.2: Passing arguments to a thread function
-----------------
- just have to pass args to std::thread constructor
- by default, the arguments are copied
    - this is done even if it is expecting a reference
- std::bind, std::ref

2.3: transferrig ownership of a thread
-----------------
- std::thread has move support
    - moveable, but not copyable
- ownership of a particular thread of execution can be moved between std::thread instances

2.4: Choosing the number of threads at runtime
-----------------
- std::thread::hardware_concurrency() indicates the number of hardware threads
    - this is the number of threads that can truly be run concurrently
    - only a hint, not a definite answekrjo

2.5: Identifying Threads
-----------------
- identifiers are of type std::thread::id
- can be retrieved in two ways
1) std::thread object by callin get_id()
2) calling std::this_thread::get_id()
- identifier can be freely copied and compared
- if id's are equal, they represent the same thread
- can be used as keys in unordered associative containers too
- often used to check whether a thread needs to perform some operation




