• Atomic operations are indivisable; they have either fully completed, or they
haven’t happened yet.
• Atomic operations in Rust are done through the atomic types in
std::sync::atomic , such as AtomicI32 .
• Not all atomic types are available on all platforms.
• The relative ordering of atomic operations is tricky when multiple variables are
involved. More in Chapter 3.
• Simple loads and stores are nice for very basic inter-thread communication, like
stop flags and status reporting.
• Lazy initialization can be done as a race, without causing a data race.
• Fetch-and-modify operations allow for a small set of basic atomic modifications
that are especially useful when multiple threads are modifying the same atomic
variable.
• Atomic addition and subtraction silently wrap around on overflow.
• Compare-and-exchange operations are the most flexible and general, and a
building block for making any other atomic operation.
• A weak compare-and-exchange operation can be slightly more efficient.