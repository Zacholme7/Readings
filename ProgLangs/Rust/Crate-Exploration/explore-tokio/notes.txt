tokio::task -> provides tools for working wtih tasks
-----------------------------
- task: nonblocking lightweight unit of execution
  - they are managed by the tokio runtime and not the OS
  - like green threads
- lightweight since created by runtime and not os
  - dont need context switch
- scheduled cooperatively
  - task is allowed to run until it yields at which point scheudler will run new task
- tasks are non blocking, must yield when it cannot do more work

task::spawn_blocking
- spawns blocking function on dedicated thread pool for blocking tasks


- tokio has explicit yield points in a number of library functions to prevent
one future that is under heavy load and always ready to starve everything else

tokio::task::JoinSet
- collection of tasks spawned on a tokio runtime
- await completion of some or all tasks in the set
- all tasks must have the same return type

tokio::task::LocalSet
- a set of tasks that are executed on the same thread
- may need to run one or more futures that are !send
        - schedule one or more !send futures
- tokio::spawn requires that the future implements !Send
- run with run_until
- spawn tasks on with spanw_local
- localset itself is a future so it must be awaited
        - it completes when all tasks on the set are completed
- can spawn several tasks on local set and run them all to completion
- can only be awaited in #tokio::main, or inside call to block_on
        - cannot be used within tokio::spawn
- What if we want to spawn !Send futures within tokio::spawn?
        - create local set somewhere else and communicate with it using mpsc













































tokio::sync -> provides synchronization promitives
tokio::time -> provides utilities for tracking time and scheduling work
tokio::runtime -> provides more options for configuring and managing runtime
tokio::io -> provides asynchronous core I/O primitives
tokio::net -> provides non blocking versions of TCP, UDP, Sockets
tokio::fs -> similar to std::fs but nonblocking
tokio::signal -> asynchronous handling of unix singals
tokio::process -> spawning and managing child processes


tokio has two kinds of threads: core threads and blocking threads
- core threads: where asynchronous code runs, default spawn one for each core
- blocking threads: spawned on demand to run code that would block other tasks
