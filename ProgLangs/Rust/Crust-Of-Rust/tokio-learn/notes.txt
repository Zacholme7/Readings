Notes
-----------------
- future takes things that impl the future trait and reutrns what is in the output 
- tokio just simply runs futures
- runtime is the heart of tokio, gives futures too and it gives you back what it computes
- scheduler take futures that come in and call the poll method on them
- return of poll is either ready with the return value or pending which means that it is not finished
- there is a multithreaded scheduler and a current thread scheduler
  - almost always want to use mulithreaded one
  - thread per cpu core, parallelism
- current thread scheduler does not start any threads, just use current thread 
  - blocks the current thread until the work is done

- block_on: takes a future and returns the output
  - do all work until that future returns ready
- spawn: takes a future and puts it onto queue of tasks for the current runtime (current thread or multi)
  - does not execute anything, just returns a joinhandle
- every future that has been spawned onto a runtime is a task
  - this does not mean that every future is a task
  - futures can contain other futures
- only top level future is a task, ones that are passed to spawn
- tokio only sees the top level tasks
- multithreaded scheduler is a work stealing scheduler, looks at other worker threads queues
- when to use current thread scehduler?
  - limit movement between threads, costly to move between cpus
  - more control over what runs where but less of a general purpose
- tokio::spawn give you a future thread::spawn gives os thread
- os is not aware of different futures
- important to make sure that futures do not do blocking calls
  - if you have chunks of code in futures (code that executes between two awaits with no await inbetween)
make sure they do not take more than 100ms, if so use block in place or move to seperate blocking thread
- blocking thread pool: they are expected to block, can spawn own threads using spawn::blocking
  - tokio can reuse these threads so more efficient than std threads
- only use block_in_place if you need to do blocking work that is not send

- Localset: set of tasks that are guaranteed to be executed on the same thread
  - spawn_local to spawn onto local set, create new top level tasks
  - can then await Localset
  - can only be used as top level task

- tokio mutex vs std::mutex
- tokio mutex they are async
- should you use them everywhere? no
- tokio mutex, in order to make async is it fairly inefficient
- std::mutex is very efficient, less overhead than tokio one
- tokio mutex guard is send compared to std::mutex one which is not
- when you call await on tokio mutex when lock is held it will put it to sleep rather than block
- use std::mutex if you have short critical sections and there are no awaits, for anything else use tokio mutex














  


