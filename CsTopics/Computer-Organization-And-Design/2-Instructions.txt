--------------------------------------------
| 2: Instructions: Language of the Computer|
--------------------------------------------

---------------------------
---- 2.1: Introduction ----
---------------------------
- language of a computer are instructions, instructions are defined by the instruction set

----------------------------------------------
---- 2.2: Operations of Computer Hardware ----
----------------------------------------------
- assembly language is the operations of computer hardware
  - broken into a set of primitive instructions
- all assembly language included in chart in book, not gonna write it all out
Ex: add a, b, c -> add b and c and put result in a

---- Summary ----
- Computer hardware runs on assembly instructions defined by the instruction set architecture

---- Memory Notes ----
----------------------
- None




------------------------------------------------
---- 2.3: Operands of the Computer Hardware ----
------------------------------------------------
- operands of arithmetic instructions must be from registers
- RISC-V registers are 32 bits (word)
- a word is just a natural unit of access for a computer, either 32 or 64 bits
- there are 32 registers
- it is the compilers job to associate variables with registers
- data transfer instructions use memory addresses to bring data into registers
- RISC-V is little endian
- ISA must have enough registers and make use of them extremely efficiently
- constant/immediate value operations are common and should be used frequently
  - x0 register is always zero

---- Summary ----
-----------------
- 


---- Memory Notes ----
----------------------
- 



------------------------------------------
---- 2.4: Signed and Unsigned Numbers ----
------------------------------------------
- numbers kept in computers as high and low electronic signals
  - binary numbers, base 2 numbers
- all information composed of binary digits
- value of ith digit = d x base ** i (i starts at zero)
- twos complement is used to represent negative and positive numbers
  - leading 1 = negative, leading 0 = positive
  - sign bit tells if num if negative or positive
- negation: invert evey 0 to 1 and every 1 to 0, then add one to result
   2 = 00000000 00000000 00000000 00000010
  -2 = 11111111 11111111 11111111 11111110






