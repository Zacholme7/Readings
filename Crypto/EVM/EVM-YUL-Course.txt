--------------------------------
| EVM & YUL Programming Course |
--------------------------------

----------------------------
---- Part 1: EVM Design ----
----------------------------
- Transaction based state machine
- transactions are packed into block and then executed as whole block
  - world state -> block with txs -> new world state
- World state is mapping between address and account state
  - account is object in the world state
- Account state contains nonce, balance, storage hash, code hash
  - externally owned account -> has a private key 
  - contract account -> contains EVM code
- Addresses of accounts
  - EOA: private key -> public key -> hash of public key -> address (160 bits)
  - Contract account: Sender address + Nonce -> RLP, Hash, right 160 bits 
- two types of transactions
  - Contract creation
  - Message call
- fields of a transactions
  - nonce: number only used once
  - gasPrice
  - gasLimit
  - to: 160 bit address or 0 if contract creation
  - value: trasferred wei
  - v, r, s 
  - init/data: contract creation or message call
- transaction is an atomic operation, all or nothing
  - executed sequentially
- EVM machine state
  - Stack: 256bits x 1024 elements
    - direct access to top 16 elements 
  - Memory: byte addressing linear memory
    - 256 bit load, 256 bit store, 8 bit store
  - Storage: persistent, 256 bits to 256 bit key value storage
    - most expensive
