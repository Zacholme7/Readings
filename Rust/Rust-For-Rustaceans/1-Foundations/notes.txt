------------------
| 1: Foundations |
------------------

---- Talking About Memory ----
- value: combination of a type and an element that is in the types domain of values
  - can be turned into a sequence of bytes using its types representation
- Ex: 6 is the the type u8, instance of mathematical integer 6, in memory rep of 0x06
- value is stored in a place (a location that can hold a value)
- pointer is a value that holds the address of a region of memory
- high level memory model useful for thinking about lifetimes and borrows
  - think of variables as names given to values as they are instantiated, moved, and used
  - consider the flows from a variable to all of its uses
- low level memory model good for reasoning about unsafe code and raw pointers
  - variables name memory locations that may or may not hold legal values
  - value slot that is filled and replaced with new values
- stack: segment of memory that your program uses as a scratch space for function calls
  - on each function call, frame allocated at the top of the stack
  - near bottom is frame for main function
  - variables stored in a frame on stack cannot be accessed after frame goes away, so after reference to 
  it must have a lifetime that is at most as long as the lifetime of the frame
- heap: where dynamic memory lives

---- Borrowing and Lifetimes ----
- references are pointers that come with an additional contrct for how they can be used
- shared reference, &T, is a pointer that may be shared
  - any other number of references may exist at the same time and each is copy
  - value behind shared ref is not mutable
- mutable references, &mut T, exclusive mutable reference
- the owner of a value is the one responsible for dropping it
- some types provide interior mutability which allows you to mutate a value through a shared reference
  - rely on things like atomic instructions or invariants
- two categories
1) those that let you get a mutable reference through a shared reference
  - Mutex, RefCell
2) those that let you replace a value given only a shared reference
  - do not give mutable ref to inner value and just gives you methods for manipulating it in place
  - atoimc integer types nad Cell
  - cannot get direct ref but can read and replace value inside





